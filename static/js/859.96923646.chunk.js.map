{"version":3,"file":"static/js/859.96923646.chunk.js","mappings":"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","sources":["webpack://react-homework/./src/components/Loader/Loader.module.css?d03f","components/Loader/Loader.jsx","components/MovieList/MovieList.jsx","components/constants/api.constants.js","components/services/common-api.service.js","pages/Home/Home.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Loader_container__KLRhb\"};","import { ThreeCircles } from 'react-loader-spinner';\nimport styles from './Loader.module.css';\n\nconst Loader = () => {\n  return (\n    <div className={styles.container}>\n      <ThreeCircles\n        height=\"50\"\n        width=\"50\"\n        color=\"#3f51b5\"\n        visible={true}\n        ariaLabel=\"three-circles-rotating\"\n      />\n    </div>\n  );\n};\n\nexport default Loader;\n","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst MovieList = ({ movies, path }) => {\n  const location = useLocation();\n  const additionalPath = path ? `${path}/` : '';\n\n  return (\n    <ul>\n      {movies.map(({ id, title }) => (\n        <li key={id}>\n          <Link to={`${additionalPath}${id}`} state={{ from: location }}>\n            {title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  path: PropTypes.string,\n};\nexport default MovieList;\n","// export const KEY = '6cf2b1d858796017e56b185acc03bccc';\nexport const KEY = '9068359f92c010fa6a3cf763f10a0606';\n// export const PER_PAGE = 20;\nexport const MEDIA_TYPE = 'movie';\nexport const TIME_WINDOWS = 'day';\nexport const API = 'https://api.themoviedb.org/3';\nexport const API_ACTIONS = { TRENDING: 'trending', SEARCH: 'search' };\nexport const API_IMG_POSTER = 'https://image.tmdb.org/t/p/w500';\n","import axios from 'axios';\nimport { toast } from 'react-toastify';\nimport {\n  KEY,\n  MEDIA_TYPE,\n  TIME_WINDOWS,\n  API,\n  API_ACTIONS,\n} from 'components/constants/api.constants.js';\n\nexport const fetchAPIMovies = async (action, search = '') => {\n  const URLString =\n    action === API_ACTIONS.TRENDING\n      ? `${API}/trending/${MEDIA_TYPE}/${TIME_WINDOWS}?api_key=${KEY}`\n      : `${API}/search/${MEDIA_TYPE}?api_key=${KEY}&query=${search}`;\n\n  try {\n    const resolve = await axios.get(URLString);\n\n    if (resolve.status !== 200 || !resolve) {\n      throw new Error('Service is temporarily unavailable .');\n    }\n    return resolve.data;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nexport const fetchAPIByID = async movieId => {\n  const URLString = `${API}/movie/${movieId}?api_key=${KEY}`;\n  try {\n    const resolve = await axios.get(URLString);\n\n    if (resolve.status !== 200 || !resolve) {\n      throw new Error('Service is temporarily unavailable .');\n    }\n    return resolve.data;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nexport const fetchReviewsByID = async movieId => {\n  const URLString = `${API}/movie/${movieId}/reviews?api_key=${KEY}`;\n  try {\n    const resolve = await axios.get(URLString);\n\n    if (resolve.status !== 200 || !resolve) {\n      throw new Error('Service is temporarily unavailable .');\n    }\n    return resolve.data;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nexport const fetchCastByID = async movieId => {\n  const URLString = `${API}/movie/${movieId}/credits?api_key=${KEY}`;\n  try {\n    const resolve = await axios.get(URLString);\n\n    if (resolve.status !== 200 || !resolve) {\n      throw new Error('Service is temporarily unavailable .');\n    }\n    return resolve.data;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n","import { useState, useEffect } from 'react';\nimport { API_ACTIONS } from 'components/constants/api.constants.js';\nimport { fetchAPIMovies } from 'components/services/common-api.service';\nimport MovieList from 'components/MovieList';\nimport Loader from 'components/Loader';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetchAPIMovies(API_ACTIONS.TRENDING)\n      .then(({ results }) => {\n        setMovies([...results.map(({ id, title }) => ({ id, title }))]);\n      })\n      .finally(setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      <MovieList movies={movies} path={'movies/'} />\n    </>\n  );\n};\n\nexport default Home;\n"],"names":["className","styles","height","width","color","visible","ariaLabel","movies","path","location","useLocation","additionalPath","map","id","title","to","state","from","KEY","MEDIA_TYPE","TIME_WINDOWS","API","API_ACTIONS","TRENDING","SEARCH","API_IMG_POSTER","fetchAPIMovies","action","search","URLString","axios","resolve","status","Error","data","toast","message","fetchAPIByID","movieId","fetchReviewsByID","fetchCastByID","useState","setMovies","isLoading","setIsLoading","useEffect","then","results","finally","Loader","MovieList"],"sourceRoot":""}